#!/usr/bin/env cs
#
# Covariant Script Package Manager v2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Copyright (C) 2017-2021 Michael Lee(李登淳)
#
# Email:   lee@covariant.cn, mikecovlee@163.com
# Github:  https://github.com/mikecovlee
# Website: http://covscript.org.cn
#
# Config File Structural
#
# ~/.cspkg
#   cspkg.log
#   config.json
#   packages.json
#

import codec.json as json
import process
import regex
import curl

namespace utils
    function open_json(path)
        var ifs = iostream.ifstream(path)
        return json.to_var(json.from_stream(ifs))
    end
    function save_json(val, path)
        var ofs = iostream.ofstream(path)
        ofs.print(json.to_string(json.from_var(val)))
    end
    function filter(str, cond)
        var _s = ""
        foreach ch in str
            if cond(ch)
                _s += ch
            end
        end
        return move(_s)
    end
    var url_reg = regex.build("^[a-zA-z]+://[^\\s]*$")
    function check_url(url)
        return !utils.url_reg.match(url).empty()
    end
    constant low_speed_limit = 100
    function http_get(url)
        if !utils.check_url(url)
            cspkg_log("cspkg: error when parsing URL \'" + url + "\".\n")
            return null
        end
        var buff = new iostream.char_buff
        var session = curl.make_session_os(buff.get_ostream())
        session.set_url(url)
        session.allow_redirect(true)
        if config.content.exist("proxy")
            session.set_proxy(config.content.proxy)
        end
        session.set_ssl_verify_host(false)
        session.set_ssl_verify_peer(false)
        session.set_connect_timeout_ms(config.content.timeout_ms.to_number())
        session.set_accept_timeout_ms(config.content.timeout_ms.to_number())
        session.set_low_speed_limit(low_speed_limit)
        session.set_low_speed_time(config.content.timeout_ms.to_number())
        if session.perform()
            return buff.get_string()
        else
            return null
        end
    end
    function http_get_file(url, path)
        if !utils.check_url(url)
            cspkg_log("cspkg: error when parsing URL \'" + url + "\".\n")
            return -2
        end
        var ofs = iostream.fstream(path, iostream.openmode.bin_out)
        if !ofs.good()
            return -1
        end
        var session = curl.make_session_os(ofs)
        session.set_url(url)
        session.allow_redirect(true)
        if config.content.exist("proxy")
            session.set_proxy(config.content.proxy)
        end
        session.set_ssl_verify_host(false)
        session.set_ssl_verify_peer(false)
        session.set_connect_timeout_ms(config.content.timeout_ms.to_number())
        session.set_accept_timeout_ms(config.content.timeout_ms.to_number())
        session.set_low_speed_limit(low_speed_limit)
        session.set_low_speed_time(config.content.timeout_ms.to_number())
        return session.perform() ? 1 : 0
    end
end

namespace env
    function user_home()
        if system.is_platform_windows()
            return system.getenv("USERPROFILE")
        else
            return system.getenv("HOME")
        end
    end
    function covscript_home()
        try
            return system.getenv("COVSCRIPT_HOME")
        catch e; end
        if system.is_platform_windows()
            return env.user_home() + system.path.separator + "Documents" + system.path.separator + "CovScript"
        end
        if system.is_platform_linux()
            return "/usr/share/covscript"
        end
        if system.is_platform_darwin()
            return "/Applications/CovScript.app/Contents/MacOS/covscript"
        end
    end
    function platform()
        if system.is_platform_windows()
            return "windows"
        end
        if system.is_platform_linux()
            return "linux"
        end
        if system.is_platform_darwin()
            return "macos"
        end
    end
    @begin
    var arch_map = {
        "AMD64" : "x86_64",
        "ARM64" : "arm64",
        "X86"   : "i386"
    }.to_hash_map()
    @end
    function arch()
        if system.is_platform_unix()
            var p = process.exec("arch", {})
            return p.out().getline()
        else
            var arch_name = system.getenv("PROCESSOR_ARCHITECTURE")
            if env.arch_map.exist(arch_name)
                return env.arch_map[arch_name]
            else
                throw runtime.exception("Unrecognizable platform name: " + arch_name)
            end
        end
    end
    function covscript_abi()
        var abi_reg = regex.build("ABI Version: ([A-Z0-9]{6})")
        var p = process.exec("cs", {"-v"})
        var r = null, line = null
        loop; until !(r = abi_reg.search(line = p.out().getline())).empty()
        return r.str(1)
    end
end

namespace config
    constant version = "2.1.1"
    var minimal_deps = {"codec", "process", "regex", "curl"}.to_hash_set()
    @begin
    var default_content = {
        "arch" : env.arch(),
        "home" : env.covscript_home(),
        "timeout_ms" : "3000",
    #   "proxy" : ""
        "source" : "https://raw.githubusercontent.com/covscript/cspkg-sources/main/index.json;http://mirrors.covariant.cn/cspkg/index.json"
    }.to_hash_map()
    @end
    var array_configs = {"source"}.to_hash_set()
    var reserved_configs = {"proxy"}.to_hash_set()
    var content = null
    var cancel_prompt = false
    function compose_home()
        return env.user_home() + system.path.separator + ".cspkg"
    end
    function compose_log()
        return env.user_home() + system.path.separator + ".cspkg" + system.path.separator + "cspkg.log"
    end
    function compose_config()
        return env.user_home() + system.path.separator + ".cspkg" + system.path.separator + "config.json"
    end
    function compose_packages()
        return env.user_home() + system.path.separator + ".cspkg" + system.path.separator + "packages.json"
    end
    function save()
        utils.save_json(config.content, config.compose_config())
    end
    function create()
        system.file.mkdir_p(config.compose_home())
        if !system.file.exist(config.compose_config())
            config.save()
        end
    end
    function init()
        if !system.file.exist(config.compose_config())
            config.content = config.default_content
            config.create()
        else
            config.content = utils.open_json(config.compose_config())
        end
    end
    function check_local_packages()
        if !system.file.exist(config.compose_packages())
            return new hash_map
        end
        var packages = utils.open_json(config.compose_packages())
        var local_pac = new hash_map
        var p = system.path.scan(env.covscript_home() + system.path.separator + "imports")
        var reg = regex.build("^(.*)\\.(cse|csp)$")
        foreach it in p
            if it.type == system.path.type.reg
                var name = it.name
                var r = reg.match(name)
                if !r.empty()
                    name = r.str(1)
                    if packages.exist(name)
                        local_pac.insert(name, packages[name])
                    else
                        cspkg_log("cspkg: unknown local package \'" + name + "\'. try cspkg install --import\n")
                    end
                end
            end
        end
        foreach it in packages
            if !local_pac.exist(it.first)
                cspkg_log("cspkg: local record of package \'" + it.first + "\' was removed when checking data consistency.\n")
            end
        end
        utils.save_json(local_pac, config.compose_packages())
        return local_pac
    end
end

namespace log_impl
    var log = null
    function open_log()
        if log_impl.log == null
            system.file.mkdir_p(config.compose_home())
            log_impl.log = iostream.fstream(config.compose_log(), iostream.openmode.app)
        end
    end
end

function cspkg_log(msg)
    log_impl.open_log()
    system.out.println(msg)
    log_impl.log.println(msg)
end

# Command Line Parser

function draw_separator()
    for i = 1, i <= system.console.terminal_width(), ++i
        system.out.print("-")
    end
    system.out.println("")
end

class cspkg_install
    var package_list = new hash_map
    var package_info = new hash_map
    var local_pac = null
    var deps_cache = null
    var deps_set = null
    function fetch_source_url(src_url)
        var source = utils.http_get(src_url)
        if source == null || source.empty()
            cspkg_log("cspkg: timeout when fetching source.\n")
            return
        end
        source = json.to_var(json.from_string(source))
        if source.exist("universal")
            var url = source.base_url + source.universal
            var uni_source = utils.http_get(url)
            if uni_source != null && !uni_source.empty()
                uni_source = json.to_var(json.from_string(uni_source))
                foreach it in uni_source do package_list.insert(it.first, it.second)
            else
                cspkg_log("cspkg: timeout when fetching universal source.\n")
            end
        end
        if source.exist(env.platform())
            if source[env.platform()].exist(config.content.arch)
                var url = source.base_url + source[env.platform()][config.content.arch]
                var os_source = utils.http_get(url)
                if os_source != null && !os_source.empty()
                    os_source = json.to_var(json.from_string(os_source))
                    foreach it in os_source
                        if package_list.exist(it.first)
                            cspkg_log("cspkg: package index \'" + it.first + "\' existing, skipping...\n")
                        else
                            package_list.insert(it.first, it.second)
                        end
                    end
                else
                    cspkg_log("cspkg: timeout when fetching platform source.\n")
                end
            end
        end
    end
    function fetch_source()
        var repos = config.content.source.split({';'})
        foreach url in repos
            fetch_source_url(url)
        end
    end
    function find_deps(pac)
        if deps_set.exist(pac)
            return
        end
        if !package_list.exist(pac)
            cspkg_log("cspkg: can not find corresponding package information: \'" + pac + "\'.\n")
            return
        end
        var info = utils.http_get(package_list.at(pac))
        if info == null || info.empty()
            cspkg_log("cspkg: timeout when fetching package information: \'" + pac + "\'.\n")
            return
        end
        info = json.to_var(json.from_string(info))
        foreach deps in info.Dependencies do find_deps(deps)
        deps_cache.insert(pac, info)
        deps_set.insert(pac)
    end
    function upgrade()
        deps_cache = new hash_map
        deps_set = new hash_set
        local_pac = config.check_local_packages()
        foreach pac in local_pac
            find_deps(pac.first)
        end
        foreach pac in local_pac
            link info = deps_cache[pac.first]
            if info.Version <= pac.second.Version
                deps_cache.erase(pac.first)
                if info.Version < pac.second.Version
                    cspkg_log("cspkg: package \'" + pac.first + "\' existed newer version locally(local: " + pac.second.Version + ", remote: " + info.Version + ")\n")
                end
            end
        end
        return deps_cache.size
    end
    function run(opt, args)
        config.init()
        fetch_source()
        if !opt.empty()
            switch opt[0]
                default
                    cspkg_log("cspkg: unknown option for install: \'" + opt[0] + "\'.\n")
                    system.exit(0)
                end
                case "--show-avail"
                    if opt.size != 1
                        cspkg_log("cspkg: wrong arguments for install --show-avail command.\n")
                        system.exit(0)
                    end
                    local_pac = config.check_local_packages()
                    var pac_names = new array
                    foreach it in package_list do pac_names.push_back(it.first)
                    pac_names.sort([](a, b)->a < b)
                    var show_promt = false
                    foreach it in pac_names
                        if local_pac.exist(it)
                            show_promt = true
                            system.out.println("\t*" + it)
                        else
                            system.out.println("\t" + it)
                        end
                    end
                    if show_promt
                        system.out.println("\n*: installed locally")
                    end
                end
                case "--import"
                    if opt.size != 1
                        cspkg_log("cspkg: wrong arguments for install --import command.\n")
                        system.exit(0)
                    end
                    var p = system.path.scan(env.covscript_home() + system.path.separator + "imports")
                    var reg = regex.build("^(.*)\\.(cse|csp)$")
                    foreach it in p
                        if it.type == system.path.type.reg
                            var name = it.name
                            var r = reg.match(name)
                            if !r.empty()
                                name = r.str(1)
                                if package_list.exist(name)
                                    var info = utils.http_get(package_list.at(name))
                                    if info == null || info.empty()
                                        cspkg_log("cspkg: timeout when fetching package information: \'" + it.name + "\'.\n")
                                    else
                                        info = json.to_var(json.from_string(info))
                                        info["FileName"] = it.name
                                        package_info.insert(name, info)
                                        cspkg_log("cspkg: found " + info.Info + "(" + info.Version + ")\n")
                                    end
                                else
                                    cspkg_log("cspkg: can not find corresponding package information: \'" + it.name + "\'.\n")
                                end
                            end
                        end
                    end
                    var deps_set = new hash_set
                    foreach pac in package_info
                        foreach dep in pac.second.Dependencies
                            deps_set.insert(dep)
                        end
                    end
                    foreach pac in package_info
                        if deps_set.exist(pac.first)
                            deps_set.erase(pac.first)
                        end
                    end
                    if !deps_set.empty()
                        cspkg_log("cspkg: dependencies not completed, required:")
                        foreach it in deps_set
                            cspkg_log("\t" + it)
                        end
                        cspkg_log("\n")
                    end
                    utils.save_json(package_info, config.compose_packages())
                end
            end
        else
            var pac_upgradable = upgrade()
            if pac_upgradable > 0
                cspkg_log("cspkg: " + pac_upgradable + " packages can be upgraded. run \'cspkg upgrade\' before install.\n")
                return
            end
            local_pac = config.check_local_packages()
            deps_cache = new hash_map
            deps_set = new hash_set
            foreach it in args
                if !package_list.exist(it)
                    cspkg_log("cspkg: package \'" + it + "\' not existed.\n")
                    continue
                end
                if local_pac.exist(it)
                    cspkg_log("cspkg: package \'" + it + "\' has installed.\n")
                    continue
                end
                find_deps(it)
            end
            foreach it in local_pac
                if deps_set.exist(it.first)
                    deps_set.erase(it.first)
                end
            end
            if deps_set.empty()
                cspkg_log("cspkg: no packages need to be installed.\n")
                return
            end
            if !config.cancel_prompt
                var sorted_list = new array
                foreach it in deps_set do sorted_list.push_back(it)
                sorted_list.sort([](a, b)->a < b)
                system.out.println("Following packages will be installed:")
                foreach it in sorted_list
                    system.out.println("\t" + it)
                end
                system.out.println("\nDo you want to continue?[y/n]")
                if system.console.getch().tolower() != 'y'
                    cspkg_log("cspkg: installation canceled.\n")
                    system.exit(0)
                end
            end
            foreach it in deps_set
                link info = deps_cache[it]
                system.out.println("Installing " + info.Info + "...")
                var reg = regex.build("^.*?(\\w+\\.(cse|csp))$")
                var r = reg.match(info.Target)
                if r.empty()
                    cspkg_log("cspkg: error when parsing URL \'" + info.Target + "\".\n")
                    continue
                end
                var error_value = utils.http_get_file(info.Target, env.covscript_home() + system.path.separator + "imports" + system.path.separator + r.str(1))
                switch error_value
                    case 1
                        local_pac.insert(it, info)
                        local_pac[it]["FileName"] = r.str(1)
                        utils.save_json(local_pac, config.compose_packages())
                        cspkg_log("cspkg: package \'" + it + "\' installed successfully.\n")
                    end
                    case 0
                        cspkg_log("cspkg: package \'" + it + "\' install failed(timeout when download file).\n")
                    end
                    case -1
                        cspkg_log("cspkg: package \'" + it + "\' install failed(unable to create file, try run with rights of administrator).\n")
                    end
                end
            end
        end
    end
end

function run_install(opt, args)
    (new cspkg_install).run(opt, args)
end

class cspkg_upgrade extends cspkg_install
    function run(opt, args) override
        config.init()
        this.fetch_source()
        if this.upgrade() == 0
            cspkg_log("cspkg: no packages need to be upgrade.\n")
            return
        end
        if !config.cancel_prompt
            var sorted_list = new array
            foreach it in this.deps_cache do sorted_list.push_back(it)
            sorted_list.sort([](a, b)->a.first < b.first)
            system.out.println("Following packages will be upgraded:")
            foreach it in sorted_list
                system.out.println("\t" + it.first + "(" + this.local_pac[it.first].Version + " -> " + it.second.Version + ")")
            end
            system.out.println("\nDo you want to continue?[y/n]")
            if system.console.getch().tolower() != 'y'
                cspkg_log("cspkg: upgrade canceled.\n")
                system.exit(0)
            end
        end
        foreach pac in this.deps_cache
            link info = pac.second
            system.out.println("Upgrading " + info.Info + "...")
            var reg = regex.build("^.*?(\\w+\\.(cse|csp))$")
            var r = reg.match(info.Target)
            if r.empty()
                cspkg_log("cspkg: error when parsing URL \'" + info.Target + "\".\n")
                continue
            end
            var error_value = config.minimal_deps.exist(pac.first) ? 1 : utils.http_get_file(info.Target, env.covscript_home() + system.path.separator + "imports" + system.path.separator + r.str(1))
            switch error_value
                case 1
                    this.local_pac[pac.first] = info
                    this.local_pac[pac.first]["FileName"] = r.str(1)
                    utils.save_json(this.local_pac, config.compose_packages())
                    cspkg_log("cspkg: package \'" + pac.first + "\' upgraded successfully.\n")
                end
                case 0
                    cspkg_log("cspkg: package \'" + pac.first + "\' install failed(timeout when download file).\n")
                end
                case -1
                    cspkg_log("cspkg: package \'" + pac.first + "\' install failed(unable to create file, try run with rights of administrator).\n")
                end
            end
        end
    end
end

function run_upgrade(opt, args)
    (new cspkg_upgrade).run(opt, args)
end

class cspkg_remove
    var local_pac = null
    var support_set = null
    function find_supports(pac)
        foreach it in local_pac
            foreach dep in it.second.Dependencies
                if dep == pac
                    support_set.insert(it.first)
                    break
                end
            end
        end
    end

    function run(opt, args)
        local_pac = config.check_local_packages()
        foreach pac in args
        end
    end
end

function run_remove(opt, args)
    if system.file.exist(config.compose_packages())
        var local_pac = config.check_local_packages()
        var pending_set = new hash_set
        foreach it in args
            if local_pac.exist(it)
                if config.minimal_deps.exist(it)
                    cspkg_log("cspkg: can not remove package \'" + it + "\' depended by cspkg.\n")
                else
                    pending_set.insert(it)
                end
            else
                cspkg_log("cspkg: package \'" + it + "\' not existed.\n")
            end
        end
        if pending_set.empty()
            cspkg_log("cspkg: no packages need to be removed.\n")
            return
        end
        var support_set = pending_set
        foreach it in local_pac
            foreach dep in it.second.Dependencies
                if pending_set.exist(dep)
                    support_set.insert(it.first)
                end
            end
        end
        if !config.cancel_prompt
            var sorted_list = new array
            foreach it in support_set do sorted_list.push_back(it)
            sorted_list.sort([](a, b)->a < b)
            system.out.println("Following packages will be removed:")
            var show_promt = false
            foreach it in sorted_list
                if !pending_set.exist(it)
                    show_promt = true
                    system.out.println("\t*" + it)
                else
                    system.out.println("\t" + it)
                end
            end
            if show_promt
                system.out.println("\n*: removed according to dependencies")
            end
            system.out.println("\nDo you want to continue?[y/n]")
            if system.console.getch().tolower() != 'y'
                cspkg_log("cspkg: remove canceled.\n")
                system.exit(0)
            end
        end
        foreach pac in support_set
            system.file.remove(env.covscript_home() + system.path.separator + "imports" + system.path.separator + local_pac[pac].FileName)
            local_pac.erase(pac)
            utils.save_json(local_pac, config.compose_packages())
            cspkg_log("cspkg: package \'" + pac + "\' removed successfully.\n")
        end
    else
        cspkg_log("cspkg: can not find package information. try \'cspkg install --import\'\n")
    end
end

function run_build(opt, args)
    if args.size != 2
        cspkg_log("cspkg: wrong arguments for build command.\n")
        system.exit(0)
    end
    var url = args[0], base_path = args[1], path = args[1] + system.path.separator + "csbuild"
    if !utils.check_url(url)
        cspkg_log("cspkg: error when parsing URL \'" + url + "\".\n")
        system.exit(0)
    end
    if url[-1] != '/'
        url += '/'
    end
    if !system.path.exist(path)
        cspkg_log("cspkg: configure directory not found in module \'" + base_path + "\'\n")
        system.exit(0)
    end
    var idx_path = base_path, pkg_path = base_path, idx_os_path = base_path, pkg_os_path = base_path, flat = false
    if !opt.empty()
        if opt[0] != "--flat"
            cspkg_log("cspkg: unknown option for build: \'" + opt[0] + "\'.\n")
            system.exit(0)
        end
        if opt.size != 1
            cspkg_log("cspkg: wrong arguments for build --flat command.\n")
            system.exit(0)
        end
        flat = true
    else
        idx_path = base_path + system.path.separator + "cspkg-repo" + system.path.separator + "index_files" + system.path.separator + "packages" + system.path.separator + "universal"
        pkg_path = base_path + system.path.separator + "cspkg-repo" + system.path.separator + "universal"
        idx_os_path = base_path + system.path.separator + "cspkg-repo" + system.path.separator + "index_files" + system.path.separator + "packages" + system.path.separator + env.platform() + system.path.separator + env.arch()
        pkg_os_path = base_path + system.path.separator + "cspkg-repo" + system.path.separator + env.platform() + system.path.separator + env.arch()
    end
    var json_reg = regex.build("^(.*)\\.json$")
    var files = system.path.scan(path)
    foreach entry in files
        if entry.type == system.path.type.reg
            if !json_reg.match(entry.name).empty()
                var info = utils.open_json(path + system.path.separator + entry.name)
                if info.Type == "Extension"
                    info.Version += "_ABI" + env.covscript_abi()
                end
                cspkg_log("cspkg: building package " + info.Name + "(" + info.Version + ")...\n")
                var file_reg = regex.build("^.*?(\\w+\\.(cse|csp))$")
                var file_name = file_reg.match(info.Target)
                if file_name.empty() || !system.file.exist(base_path + system.path.separator + info.Target)
                    cspkg_log("cspkg: invalid target in module \'" + base_path + "\'\n")
                    continue
                end
                if info.Type == "Extension"
                    system.path.mkdir_p(idx_os_path)
                    system.path.mkdir_p(pkg_os_path)
                    system.file.copy(base_path + system.path.separator + info.Target, pkg_os_path + system.path.separator + file_name.str(1))
                    if flat
                        info.Target = url + file_name.str(1)
                    else
                        info.Target = url + env.platform() + "/" + env.arch() + "/" + file_name.str(1)
                    end
                    info.erase("Type")
                    utils.save_json(info, idx_os_path + system.path.separator + info.Name + ".json")
                    continue
                end
                if info.Type == "Package"
                    system.path.mkdir_p(idx_path)
                    system.path.mkdir_p(pkg_path)
                    system.file.copy(base_path + system.path.separator + info.Target, pkg_path + system.path.separator + file_name.str(1))
                    if flat
                        info.Target = url + file_name.str(1)
                    else
                        info.Target = url + "universal/" + file_name.str(1)
                    end
                    info.erase("Type")
                    utils.save_json(info, idx_path + system.path.separator + info.Name + ".json")
                end
            end
        end
    end
end

function run_config(opt, args)
    if args.size != 1
        cspkg_log("cspkg: wrong arguments for config command.\n")
        system.exit(0)
    end
    config.init()
    if !config.content.exist(args[0]) && !config.reserved_configs.exist(args[0])
        cspkg_log("cspkg: key \'" + args[0] + "\' does not exists.\n")
        system.exit(0)
    end
    if !opt.empty()
        switch opt[0]
            default
                cspkg_log("cspkg: unknown option for config: \'" + opt[0] + "\'.\n")
                system.exit(0)
            end
            case "--set"
                if opt.size != 2
                    cspkg_log("cspkg: wrong arguments for config --set command.\n")
                    system.exit(0)
                end
                config.content[args[0]] = opt[1]
                config.save()
            end
            case "--app"
                if opt.size != 2
                    cspkg_log("cspkg: wrong arguments for config --app command.\n")
                    system.exit(0)
                end
                if config.array_configs.exist(args[0])
                    link cfg = config.content[args[0]]
                    var arr = cfg.split({';'})
                    cfg = new string
                    foreach it in arr
                        if it == opt[1]
                            cspkg_log("cspkg: value existed in \'" + args[0] + "\'.\n")
                            system.exit(0)
                        end
                        cfg += it + ";"
                    end
                    cfg += opt[1]
                    config.save()
                else
                    cspkg_log("cspkg: can not append to non-array config \'" + args[0] + "\'.\n")
                    system.exit(0)
                end
            end
            case "--unset"
                if opt.size != 1
                    cspkg_log("cspkg: wrong arguments for config --unset command.\n")
                    system.exit(0)
                end
                if config.default_content.exist(args[0])
                    config.content[args[0]] = config.default_content[args[0]]
                else
                    config.content.erase(args[0])
                end
                config.save()
            end
        end
    end
    if config.reserved_configs.exist(args[0]) && !config.content.exist(args[0])
        system.out.println("\'" + args[0] + "\' is not set")
    else
        system.out.println(args[0] + " = " + config.content[args[0]])
    end    
end

function list_packages(opt, args)
    if system.file.exist(config.compose_packages())
        var packages = config.check_local_packages()
        block
            var oldt = packages
            packages = new array
            foreach it in oldt
                packages.push_back(it)
            end
            packages.sort([](a, b)->a.first < b.first)
        end
        system.out.println("Installed Packages")
        draw_separator()
        var max_size_c0 = 0
        foreach it in packages
            if it.first.size > max_size_c0
                max_size_c0 = it.first.size
            end
        end
        system.out.print("Name")
        foreach i in range(max_size_c0) do system.out.print(" ")
        var max_size_c1 = 0
        foreach it in packages
            if it.second.Version.size > max_size_c1
                max_size_c1 = it.second.Version.size
            end
        end
        system.out.print("Version")
        if max_size_c1 < 7
            max_size_c1 = 7
        end
        foreach i in range(max_size_c1 - 3) do system.out.print(" ")
        system.out.println("Description")
        draw_separator()
        foreach it in packages
            system.out.print(it.first)
            foreach i in range(max_size_c0 - it.first.size) do system.out.print(" ")
            system.out.print("    ")
            system.out.print(it.second.Version)
            foreach i in range(max_size_c1 - it.second.Version.size) do system.out.print(" ")
            system.out.print("    ")
            system.out.println(it.second.Info)
        end
    else
        cspkg_log("cspkg: can not find package information. try \'cspkg install --import\'\n")
    end
end

function show_help(opt, args)
@begin
    system.out.println(
        "Usage: cspkg <commands> ... [options] ...\n" +
        "\nCommands:\n" +
        "    install   | -i  <Package>...  Install packages from remote source\n" +
        "    remove    | -r  <Package>...  Remove packages\n" +
        "    config    | -c  <Key>         Manage local configuration\n" +
        "    upgrade   | -u                Upgrade local packages\n" +
        "    build     | -b  <URL> <PATH>  Build package index file\n" +
        "    list      | -l                List current packages\n" +
        "    help      | -h                Show help information\n" +
        "    version   | -v                Show version information\n" +
        "\nOptions:\n" +
        "    --import                      scanning local CovScript packages\n" +
        "    --show-avail                  show available CovScript packages in remote source\n" +
        "    --set     <Value>             Set a configuration key\n" +
        "    --app     <Value>             Append to a configuration key\n" +
        "    --unset                       Restore a configuration key to default\n" +
        "    --flat                        Don't create cspkg-repo directory structure\n" +
        "    --yes                         Cancel the prompt"
    )
@end
end

function show_version(opt, args)
@begin
    system.out.println(
        "Covariant Script Package Manager " + config.version + "\n" +
        "\nEnvironment Variables:\n" +
        "            OS: " + env.platform() + "\n" +
        "          ARCH: " + env.arch() + "\n" +
        "     USER_HOME: " + env.user_home() + "\n" +
        "COVSCRIPT_HOME: " + env.covscript_home() + "\n"
    )
@end
end

function command_error(cmd)
    cspkg_log("cspkg: \'" + cmd + "\' is not a cspkg command. see \'csman help\'\n")
end

var cmd_args = context.cmd_args

if cmd_args.size == 1
    show_help(null, null)
    system.exit(0)
end

@begin
var cspkg_cmds = {
    "install" : run_install,
    "-i" : run_install,
    "upgrade" : run_upgrade,
    "-u" : run_upgrade,
    "remove" : run_remove,
    "-r" : run_remove,
    "config" : run_config,
    "-c" : run_config,
    "build" : run_build,
    "-b" : run_build,
    "list" : list_packages,
    "-l" : list_packages,
    "help" : show_help,
    "-h" : show_help,
    "version" : show_version,
    "-v" : show_version
}.to_hash_map()
@end

var cspkg_options = {}
var cspkg_args = {}

# Processing CLI Args

var target_function = cspkg_cmds[cmd_args[1]]

if target_function == 0
    command_error(cmd_args[1])
    system.exit(0)
end

block
    var idx = 2
    while idx != cmd_args.size
        if cmd_args[idx].find("--", 0) != 0
            cspkg_args.push_back(cmd_args[idx])
        else
            break
        end
        ++idx
    end
    while idx != cmd_args.size
        if cmd_args[idx] == "--yes"
            config.cancel_prompt = true
        else
            cspkg_options.push_back(cmd_args[idx])
        end
        ++idx
    end
end

target_function(cspkg_options, cspkg_args)
